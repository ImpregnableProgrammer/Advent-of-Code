
import re

# Part 1 - ATTAINED CORRECT ANSWER OF 498 IN 39 SEC
def BFSearch(s):
    Nodes = set()
    Locations = set()
    Step = 0
    Map = s.split()
    Length = len(Map)
    Width = len(Map[0])
    
    for i in range(Length):
      for j in range(Width):
        if Map[i][j].isdigit():
          Locations.add(Map[i][j])
          if Map[i][j] == "0":
            Nodes.add((i,j,i,j,("0",)))
    
    print(Nodes, Locations, Length, Width)
    
    while 1:
        NodesN = set()
        for CurrentX, CurrentY, OldX, OldY, LocationsV in Nodes:
            if set(LocationsV) == Locations:
                return Step
            IsDigit = Map[CurrentX][CurrentY].isdigit()
            if CurrentY+1<Width and Map[CurrentX][CurrentY+1] != "#" and (CurrentY+1 != OldY or (IsDigit and Map[CurrentX][CurrentY] not in LocationsV[:-1])):
                Char = Map[CurrentX][CurrentY+1]
                NodesN.add((CurrentX,CurrentY+1,CurrentX,CurrentY,LocationsV + (Map[CurrentX][CurrentY+1],) if Char.isdigit() and Char not in LocationsV else LocationsV))
            if CurrentX+1<Length and Map[CurrentX+1][CurrentY] != "#" and (CurrentX+1 != OldX or (IsDigit and Map[CurrentX][CurrentY] not in LocationsV[:-1])):
                Char = Map[CurrentX+1][CurrentY]
                NodesN.add((CurrentX+1,CurrentY,CurrentX,CurrentY,LocationsV + (Map[CurrentX+1][CurrentY],) if Char.isdigit() and Char not in LocationsV else LocationsV))
            if CurrentY-1>=0 and Map[CurrentX][CurrentY-1] != "#" and (CurrentY-1 != OldY or (IsDigit and Map[CurrentX][CurrentY] not in LocationsV[:-1])):
                Char = Map[CurrentX][CurrentY-1]
                NodesN.add((CurrentX,CurrentY-1,CurrentX,CurrentY,LocationsV + (Map[CurrentX][CurrentY-1],) if Char.isdigit() and Char not in LocationsV else LocationsV))
            if CurrentX-1>=0 and Map[CurrentX-1][CurrentY] != "#" and (CurrentX-1 != OldX or (IsDigit and Map[CurrentX][CurrentY] not in LocationsV[:-1])):
                Char = Map[CurrentX-1][CurrentY]
                NodesN.add((CurrentX-1,CurrentY,CurrentX,CurrentY,LocationsV + (Map[CurrentX-1][CurrentY],) if Char.isdigit() and Char not in LocationsV else LocationsV))
        Nodes = NodesN
        Step += 1
        print(len(Nodes), Step)


# Part 2 - ATTAINED CORRECT ANSWER OF 804 IN 18 MIN 20 SEC
def BFSearch2(s):
    Nodes = set()
    Locations = set()
    Step = 0
    Map = s.split()
    Length = len(Map)
    Width = len(Map[0])
    
    for i in range(Length):
      for j in range(Width):
        if Map[i][j].isdigit():
          Locations.add(Map[i][j])
          if Map[i][j] == "0":
            Nodes.add((i,j,i,j,("0",)))
    
    print(Nodes, Locations, Length, Width)
    
    while 1:
        NodesN = set()
        for CurrentX, CurrentY, OldX, OldY, LocationsV in Nodes:
            if set(LocationsV) == Locations and LocationsV[-1] == "0":
                return Step
            IsDigit = Map[CurrentX][CurrentY].isdigit()
            if CurrentY+1<Width and Map[CurrentX][CurrentY+1] != "#" and (CurrentY+1 != OldY or (IsDigit and Map[CurrentX][CurrentY] not in LocationsV[:-1])):
                Char = Map[CurrentX][CurrentY+1]
                NodesN.add((CurrentX,CurrentY+1,CurrentX,CurrentY,LocationsV + (Map[CurrentX][CurrentY+1],) if Char.isdigit() and (Char not in LocationsV or Char == "0") else LocationsV))
            if CurrentX+1<Length and Map[CurrentX+1][CurrentY] != "#" and (CurrentX+1 != OldX or (IsDigit and Map[CurrentX][CurrentY] not in LocationsV[:-1])):
                Char = Map[CurrentX+1][CurrentY]
                NodesN.add((CurrentX+1,CurrentY,CurrentX,CurrentY,LocationsV + (Map[CurrentX+1][CurrentY],) if Char.isdigit() and (Char not in LocationsV or Char == "0") else LocationsV))
            if CurrentY-1>=0 and Map[CurrentX][CurrentY-1] != "#" and (CurrentY-1 != OldY or (IsDigit and Map[CurrentX][CurrentY] not in LocationsV[:-1])):
                Char = Map[CurrentX][CurrentY-1]
                NodesN.add((CurrentX,CurrentY-1,CurrentX,CurrentY,LocationsV + (Map[CurrentX][CurrentY-1],) if Char.isdigit() and (Char not in LocationsV or Char == "0") else LocationsV))
            if CurrentX-1>=0 and Map[CurrentX-1][CurrentY] != "#" and (CurrentX-1 != OldX or (IsDigit and Map[CurrentX][CurrentY] not in LocationsV[:-1])):
                Char = Map[CurrentX-1][CurrentY]
                NodesN.add((CurrentX-1,CurrentY,CurrentX,CurrentY,LocationsV + (Map[CurrentX-1][CurrentY],) if Char.isdigit() and (Char not in LocationsV or Char == "0") else LocationsV))
        Nodes = NodesN
        Step += 1
        print(len(Nodes), Step)


Sample = '''###########
#0.1.....2#
#.#######.#
#4.......3#
###########'''

Input = '''###################################################################################################################################################################################
#...............#.........#...#...#.......#.......#.#...#.........#...........#...............#.#.#.......#.......#.....#...........#...#...#.......#.......#...#....2#...........#
#.#.#.#.#.###.#.#####.#.#.#.###.#.#.#######.###.#.#.#.#.#.#.###.#.#.###.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.#.#.#.###.#.#.#.#####.###.#.#.#.#.#.#.#####.#.#.###.#######
#....1#...#.#...#.......#.......#...#.......#.....#...#.#...#...#.......#.............#.....#...#.#.........#...#.....#.....#.........#...#...#.....#...#.#...#.#.#...#.........#.#
#######.#.#.###.#.#######.#####.#.#.#.#.###.#.###.#.#####.#.#.#.#.#.#########.###.#.#.#.###.#.#.#.###.#.###.#.#.#.#.#.#######.#.###########.#.#.###.#.###.#.#.#.#.#.#.#.###.#.#.#.#
#...#.....#.#...#.......#.#...#.....#.....#.......#.#...#...........#.........#.....#.........#.#.#...#.....#.....#.......#...#.............#...#.#.#.....#...#.#...#.#.....#.....#
#.###.###.#.#.#.#####.#.#.#.#.#.#.#.#.###.###.#.#.#.#.#.###.#.###.#####.#.#####.###.#####.#.#.#.#.#.#.#####.#.###.#.###.#.###.#.#.###.#.#.#.#.#.#.###.###.#.###.#.###########.#.###
#...........#.......#...........#.#...#...#.........#.......#.....#...............#.....#...#.........#...#.#...#.....#...#...............#.#.....#.........#.........#.........#3#
#####.#####.#######.#.#######.#.#.###.#.#.#.#.#########.#####.#####.#######.#.###.#.#.#.#.###.#.#.#.#.#.#.###.#.#.#.#.#.#.###.#####.#######.###.###.#.#####.#.#.###.#.#.#######.#.#
#...........#.........#.........#...........#...#.....#.....#...................#.......#.........#.#.#.#.#.#...#.#.........#.#...#.....#...#.#.#.#.....#.#.#...#.#.....#.#.......#
#.###.#####.###.#.#.#.#.#.#.#####.###.#.#####.#.#.#.#####.###.###.###.#.#######.#.#.###.#.#.#######.#.#.#.#.#####.#.#.#.#.#.#.###.#######.###.###.#######.#.#.###.#####.#.###.###.#
#.....#...............#.#...#.....#...............#.......#.........#.#.#.........#.......#.....#...#.#.....#.....#.#...#.......#.#.#.#...#.....#.......#.#.#.#.#.#.#.#.......#...#
#.#.###.#.#.#.#.#####.#####.#.#.#.#.#.#####.#.#####.#.#.###.#####.#.#.#.#.###.#####.#.#.#.#.#.#.#.###.#####.#.#.###.#.#.###.#.#.#.#.#.#########.#######.#.#.###.#.#.#.#.#.#.###.#.#
#.#...#...#...#.............#.#.#.........#...#.........#.#.#...#...#...#.........#.#.....#.....#...........#.....#.#.....#.#...#.......#.#.......#.....#.#.#...#...#...#.#.......#
#.#.#.#.###.###.###.#####.#.#.#.#.#####.#.###.###.#.#.#.#.###.#.#.#.###.#.#.#####.#.#.#.###.#######.###.###.#.###.###.###.#.#.#.###.###.#.#.###.#.#.#.#.#.#.#####.#.###.#.#.#.#####
#...........#.......#.....#...#...#.......#.......#.........#...........#.#...#...#.#...#.........#.#.#.....#.......#.#...#...#.........#.....#.#.#.....#.........#.#...#.#...#...#
#.###.###.#.#.###.#.#.###.#####.#.#.###.#.###.###.#.###.###.#####.#.#.#.#.#.#.#.#.#.###.#.#######.#.#.###.#.#.###.#.#.#.#####.#.#.#####.#.#.#.#.#######.#.#.#.#.###.#.#.###.#.#.#.#
#.#0......#.#...............#.....#.#.#...#...#...................#...#.#...#...#.....#...#...#.#...#...........#.....#...#.....#.#.....#...#...#.....#...#.....#.......#...#.....#
#.###.#.#####.#####.#########.###.#.#.#######.#.#.#.#####.###.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.###.#.#.#######.#.#.###.#.#.#.#.#.#.#.#.#.###########.#.###.#.#.#.#.#.###.#
#.....#.............#.......#.#.....#.....#.#...#...#.#.#.....#.......#...#...#.#.......#...#.....#.....#...#.#.#...#...#.#.#.....#.#...#.....#.#...#.#.....#.#...#.......#...#...#
#.#.#.###.#.#.###.#.#.#.###.#.#.#####.#####.#.#.#####.#.#.#.#.###.#.#.###.#####.#.###.###.###.###.###.###.#.#.###.###.#.###.#.#.#.#####.#####.#.#.#.#.#.#.#.#.#.#.#.###.###.#.#.#.#
#.....#.#...#...#...#...#...#.....#.........#.......#...#...#.#.#...#.#.....#.....#.....#.....#...#...#.......#.................#.....#...#.....#...#.........#.#...#...#...#...#.#
###.#.#.###.#.#.#####.#.###.#.#.#.#.#.###.###.###.#.#.#.#.#.#.#.###.###.###.#.#.#.#.#.#####.#####.#.#####.###.#####.###########.###.#.#.###.#.#.#.#.#######.#.#.#.###.#.#.#.#.#####
#...#.#.......#.#.......#...#.....#.#.#...........#.#.#...#.........#...#...#.#...#.#.............#.............#...#.#...#...........#.#...#...#...#...#.#.#.....#.........#7#...#
#.#.#.#.#######.#.#.#.#.###.#.###.#.#.#.#######.###.#.#.#.#.#.###########.###.#.###.#.#.#.###.#########.#.#######.###.#.#.#.#.###.#.#.#.#.#.#.###.#.#.###.#.#######.#.#####.###.#.#
#...............#...#...#.....#...#.............#.#.#.#...#.#...#.#.......#.....#...#...#.#...#.#.........#.......#.#.....#...#.#.#.#...#.#.#.......#.#.#.....#.......#.#...#...#.#
###########.#.#.###.#####.#########.#####.#.###.#.#.#.#.#.#.###.#.#.#####.#####.#.#.###.###.###.#.#.#.#.#.#####.###.#####.#.###.#######.###.###.#.#.###.#.#.#.#.#.#.###.#.#.#.###.#
#.#...#.........#.#.......#...#.....#.#...#...#.......#.........#...#.#.........#.#.#.........#.#.#...#.....#...#.........#.#...#...#...#...#.....#...#.#.#.....#...#...#...#.....#
#.#.#.#.#.###.#.#.#######.#.#.#.###.#.#.#####.#######.#.#.#.#.#.###.#.###.#.#.#.#########.#.#.#.#.#.#.#.#.#.#.###.#.#.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#####.###.#.#.#.#.#.###.#
#...#.#...........#.......#...........#.......#.......#...#...#.#.#.....#.#...........#.#.#.....#.#.........#.....#.....#...#.............#...#...#.....#.....#.....#...#.#.#.#...#
#.#.#####.#.#####.#.#####.#########.###.#.###.###.#.#.#.#.#.###.#.#.#.#.#.#######.#.#.#.###.###.#.#.#####.#####.###.###.#.#######.#########.#####.#####.###.#.#######.#.#.#.#####.#
#.#.......#...#...#.....#.#6#.......#...#.#.......#.....#.....#...........#...#...#.#.....#.#.#...#.........#.........#.#.....#...#.........#...#.#.#...#.....#.#.....#.#.........#
#.#.#.#.#.#.#.#.#######.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#######.#.#.#.#.#.#.#.#.#.#.#.#####.#.###.#####.#####.#.#.###.#.###.#.#.#.#.#.#.#.###.#.#.#.###.#.###.#.#.#.###.###.#.#.#.#
#.#.#.#...#.#.....#.#.#.....#.................#...#.#.#.#...#...........#.#...#.......#...........#...#.........#.#.#.......#...#.......#...#.#...#.#...#...#.#.....#.......#...#.#
#.###.#.###.#.#.###.#.#.#.###.#########.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.###.#.#.###.###.#.#.#.#.#.#.#####.#.#.#.###.#.#.#.#.#.#.#.#####.###.#.#.###.#####.###.#.#############.#.#.#
#.....#...#.#.........#.......#.....#...#.....#.#.......#...........#.......#.#.#.......#.....#.#.#.......#.....#...#...#...#.....#...#.....#.......#.........#.......#5#.......#.#
#.#####.#.#.#.###.###########.#.###.#.#####.#####.###.#####.#################.#.#.#.#.#.###.#####.###.###.###.#.###.###.#.#####.#.#.#.###.#.#####.#.###.#.###.#.###.#.#.#.#.#.###.#
#.#.....#...#.........#.....#.#.......#...#...#4#...#...#.#.#...#.....#...#.#...#.........#...#.............#...#.#.#.....#.........#.#.....#...........#.....#.#...#...#.#.....#.#
#.#.#.#.#.#.#########.#.#.#.#.#.#.#####.#.###.#.###.###.#.#.#.#.#.#.#.###.#.#######.#####.#.#.###.#.#.###.#.###.#.#.#.#####.#.###.#.#.###.###.#####.#.#.#.#####.#.#.#.###.#.###.#.#
#.#...#.....#.......#.....#...#...#.............#.#.#.....#...#...#...#.....#.#.#...#.....#...#...#.#.#.#...#.#.........#.#.......#.......#...#...#.......#.....#.#.#.....#...#...#
###################################################################################################################################################################################'''

print(BFSearch2(Input))
